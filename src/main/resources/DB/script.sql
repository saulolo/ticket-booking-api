-- #############################################
-- ## Script de Base de Datos - Ticket Booking -API
-- #############################################

-- Establece el propietario del esquema 'public'
CREATE SCHEMA public AUTHORIZATION pg_database_owner;

-- Comentario para el esquema
COMMENT ON SCHEMA public IS 'standard public schema';

-- ####################
-- ## CREACIÓN DE SECUENCIAS
-- ####################

-- Secuencia para la tabla 'flights'
CREATE SEQUENCE public.flights_id_flight_seq
    INCREMENT BY 1
    MINVALUE 1
    START 1
	CACHE 1;

-- Secuencia para la tabla 'reservations'
CREATE SEQUENCE public.reservations_id_reservation_seq
    INCREMENT BY 1
    MINVALUE 1
    START 1
	CACHE 1;

-- Secuencia para la tabla 'tickets'
CREATE SEQUENCE public.tickets_id_ticket_seq
    INCREMENT BY 1
    MINVALUE 1
    START 1
	CACHE 1;

-- Secuencia para la tabla 'users'
CREATE SEQUENCE public.users_id_user_seq
    INCREMENT BY 1
    MINVALUE 1
    START 1
	CACHE 1;

-- ####################
-- ## CREACIÓN DE TABLAS
-- ####################

-- Tabla para gestionar los vuelos disponibles
CREATE TABLE public.flights (
                                id_flight INT8 GENERATED BY DEFAULT AS IDENTITY NOT NULL,
                                arrival_time TIMESTAMP(6) NOT NULL,
                                created_date TIMESTAMP(6) NOT NULL,
                                departure_time TIMESTAMP(6) NOT NULL,
                                destination VARCHAR(100) NOT NULL,
                                flight_number VARCHAR(30) NOT NULL,
                                origin VARCHAR(100) NOT NULL,
                                CONSTRAINT flights_pkey PRIMARY KEY (id_flight)
);

-- Tabla para gestionar los usuarios del sistema
CREATE TABLE public.users (
                              id_user INT8 GENERATED BY DEFAULT AS IDENTITY NOT NULL,
                              created_date TIMESTAMP(6) NOT NULL,
                              description VARCHAR(100) NOT NULL,
                              "name" VARCHAR(30) NOT NULL,
                              CONSTRAINT users_pkey PRIMARY KEY (id_user)
);

-- Tabla para gestionar los tiquetes de vuelo
CREATE TABLE public.tickets (
                                id_ticket INT8 GENERATED BY DEFAULT AS IDENTITY NOT NULL,
                                created_date TIMESTAMP(6) NOT NULL,
                                description VARCHAR(100) NOT NULL,
                                is_available BOOL NOT NULL,
                                price NUMERIC(38, 2) NOT NULL,
                                seat_number VARCHAR(10) NOT NULL,
                                id_flight INT8 NOT NULL,
                                CONSTRAINT tickets_pkey PRIMARY KEY (id_ticket)
);

-- Tabla para gestionar las reservas de tiquetes
CREATE TABLE public.reservations (
                                     id_reservation INT8 GENERATED BY DEFAULT AS IDENTITY NOT NULL,
                                     created_date TIMESTAMP(6) NOT NULL,
                                     description VARCHAR(100) NOT NULL,
                                     reservation_code VARCHAR(30) NOT NULL,
                                     id_ticket INT8 NOT NULL,
                                     id_user INT8 NOT NULL,
                                     is_cancelled BOOL DEFAULT FALSE NOT NULL,
                                     CONSTRAINT reservations_pkey PRIMARY KEY (id_reservation),
                                     CONSTRAINT uk6g1uj544xgjuyhj6kjh6pka6l UNIQUE (reservation_code),
                                     CONSTRAINT ukjtbhsav36349h0cnfv7crbr2p UNIQUE (id_ticket)
);

-- ####################
-- ## CREACIÓN DE LLAVES FORÁNEAS
-- ####################

-- FOREIGN KEY para tickets (id_flight)
-- Relaciona un tiquete con un vuelo específico
ALTER TABLE public.tickets ADD CONSTRAINT fk_ticket_to_flight FOREIGN KEY (id_flight) REFERENCES public.flights(id_flight);

-- FOREIGN KEY para reservations (id_ticket)
-- Relaciona una reserva con un tiquete específico
ALTER TABLE public.reservations ADD CONSTRAINT fk_reservation_to_ticket FOREIGN KEY (id_ticket) REFERENCES public.tickets(id_ticket);

-- FOREIGN KEY para reservations (id_user)
-- Relaciona una reserva con un usuario específico
ALTER TABLE public.reservations ADD CONSTRAINT fk_reservation_to_user FOREIGN KEY (id_user) REFERENCES public.users(id_user);


-- #################
-- ## INSERTS A TABLAS
-- #################

--Insertar registros a la tabla flights
INSERT INTO flights (flight_number, origin, destination, departure_time, arrival_time, created_date)
VALUES
    ('AB123', 'Madrid', 'Bogotá', '2025-09-21 15:00:00', '2025-09-22 01:00:00', NOW()),
    ('CD456', 'Medellín', 'Miami', '2025-09-22 08:30:00', '2025-09-22 13:00:00', NOW()),
    ('EF789', 'Bogotá', 'Ciudad de México', '2025-09-23 20:00:00', '2025-09-23 23:00:00', NOW());

--Insertar registros a la tabla tickets
INSERT INTO tickets (seat_number, price, is_available, description, created_date, id_flight)
VALUES
    ('1A', 250.00, TRUE, 'Asiento de pasillo en clase económica', NOW(), 1),
    ('2B', 450.00, TRUE, 'Asiento con ventanilla en clase de negocios', NOW(), 1),
    ('3C', 300.00, TRUE, 'Asiento en clase económica', NOW(), 2),
    ('4D', 500.00, TRUE, 'Asiento con ventanilla en primera clase', NOW(), 2),
    ('5E', 280.00, TRUE, 'Asiento de pasillo en clase económica', NOW(), 3);